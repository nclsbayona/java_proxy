El HTTPS (Secure Hyper Text Transfer Protocol) es un protocolo que combina el protocolo HTTP (Hyper Text Transfer Protocol) para la comunicación de diferentes máquinas y el protocolo SSL o el protocolo TLS (Secure Sockets Layer / Transport Layer Security) para manejar un poco la seguridad de la misma. En términos más técnicos, el protocolo HTTPS es un protocolo que usa el protocolo HTTP perteneciente a la capa de aplicación (Capa 4 en el modelo de referencia TCP/IP y capa 7 en el modelo OSI) y ejecuta este sobre una capa del protocolo SSL o TLS la cual brinda seguridad en la comunicación por medio del aseguramiento de la conexión en la capa de transporte (Capa 4 en el modelo OSI y capa 3 en el modelo de referencia TCP/IP), actuando así casi como una extensión al protocolo HTTP y no un protocolo completamente diferente. Es por esta razón que el hecho de utilizar el protocolo HTTPS para enviar las peticiones a los diferentes servidores en vez de utilizar el protocolo HTTP no altera de una forma significativa la forma como sucede el intercambio de mensajes entre los involucrados en la conexión, pero si aumenta significativamente la seguridad de la misma, puesto que tiene presente la integridad, confidencialidad y la disponibilidad de la información. La forma en la que esto puede suceder consiste en un intercambio de llaves de encriptación para poder llevar a cabo un proceso de encriptación simétrica (La razón por la que se sigue el modelo de cifrado simétrico consiste en que el mismo resulta más eficiente por algunas cuestiones como la generación de llaves que el modelo asimétrico) en un momento posterior al conocido three-way handshake propio del protocolo TCP, perteneciente también a la capa de transporte. El establecimiento de conexión en este caso ocurre entonces en dos grandes momentos: El Three-way Handshake, donde cliente y servidor acuerdan que van a llevar a cabo una comunicación, y el TLS Handshake, donde cliente y servidor llevan a cabo un intercambio de llaves para poder encriptar la comunicación. Es importante entender como funcionan estos procedimientos, por un lado, el Three-way Handshake conlleva tres pasos:

    1. El cliente realiza una petición para comenzar con la comunicación.
    2. El servidor asegura haber recibido la solicitud y hace saber al cliente su disposición a comenzar la comunicación.
    3. El cliente asegura haber recibido el mensaje y todo está preparado para llevar a cabo la comunicación.
    
Es importante notar que dado que ya se estableció una comunicación orientada a la conexión, se realizará una confirmación por los mensajes que se envien, sin embargo, estos no se consideran parte del proceso del TLS Handshake. El TLS Handshake se compone de tres pasos principalmente, vale la pena resaltar que el proceso ha venido mejorando con el paso de los años, por lo tanto, este se ha actualizado conforme a las diferentes versiones, aunque el principal objetivo siempre ha sido el hecho de llevar a cabo un intercambio de llaves para poder así cifrar la comunicación, es por esta razón que la cantidad de pasos requeridos para llevar a cabo el proceso ha cambiado. En este momento se hara referencia a la versión 1.3 del protocolo TLS, dado que esta es la versión más actualizada al momento, además de presentar diferentes mejoras comparado con sus versiones antecesoras, convirtiendola así en un estándar para identificar los puntos necesarios para llevar a cabo un proceso de cifrado.

    1. El cliente envía un mensaje para que el servidor conozca los diferentes metodos de encriptación que soporta este, así como el protocolo y la versión que utiliza, entre otras particularidades importantes referentes al cifrado de la comunicación. Es importante mencionar que aquí se comparte una o más llaves generadas por el cliente para cada uno de los metodos de encriptación que considera va a seleccionar el servidor, así como la información de cada uno. De esta manera, se acorta el número de pasos requeridos para el intercambio de las llaves.
    2. El servidor envía un mensaje al cliente en el cual define el metodo de encriptación a usarse (Es importante mencionar que si este método es diferente al método seleccionado por el cliente, se modifica el mensaje para solicitar al cliente que vuelva a ejecutar el paso anterior, pero esta vez teniendo en cuenta el método escogido por el servidor), una llave generada por el servidor con base en el metodo seleccionado y los certificados, así como un mensaje en el que el servidor hace explícito que no tiene más información para compartir en el proceso.
    3. El cliente verifica los certificados del servidor, genera las llaves correspondientes para establecer una comunicación simétrica por medio de un proceso de exponenciación modular y envía un mensaje al servidor en el cual acepta o no la conexión, a partir de este momento, la conexión ya se encuentra cifrada y lista para comenzar.

Gracias a lo mencionado anteriormente, podemos entonces explicar la razón por la cual resulta bastante complejo el hecho de llevar a cabo peticiones HTTPS desde el proxy, puesto que si bien, es posible que estas peticiones puedan llevarse a cabo desde el proxy hasta el servidor final, y es necesario mencionar que los diferentes clientes que nos proporciona Apache HttpComponents permiten que esto suceda, también es cierto que el cliente necesitaría del establecimiento de una conexión privada con el proxy para enviar los datos del cliente al servidor final, no obstante, esto generaría que el proxy debiese de poseer un certificado para que el cliente pueda verificar la autenticidad del mismo, lo cual no solo es complicado, sino que indirectamente atentaría contra la seguridad de la conexión. Una solución sería entonces redirigir la petición directamente al servidor final, no obstante, el tráfico entonces estaría encriptado y el hecho de no conocer las llaves usadas para la encriptación de la información imposibilitaría entonces el procesamiento de la misma. Por lo enunciado anteriormente, se decidió no hacer uso de peticiones HTTPS y manejar todo el tráfico como HTTP únicamente.

    https://www.cloudflare.com/learning/ssl/why-is-http-not-secure/
    https://www.securitymetrics.com/blog/are-http-websites-insecure
    https://www.geeksforgeeks.org/https-full-form/
    https://www.genbeta.com/web/https-asi-funciona
    https://www.genbeta.com/guia-de-inicio/explicando-el-protocolo-https
    https://www.youtube.com/watch?v=VzWqnT5dErI
    https://www.youtube.com/watch?v=10aVMoalON8
    https://www.youtube.com/watch?v=grRi-aFrbSE
    https://www.youtube.com/watch?v=_zWtopE58DE
    https://www.youtube.com/watch?v=yPdJVvSyMqk